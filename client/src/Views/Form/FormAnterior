import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useHistory } from "react-router-dom";
import { getTemperaments, postDog } from "../../Redux/Actions/actions";
import styles from "./Form.module.css";

const Form = () => {
  const dispatch = useDispatch();
  const temperaments = useSelector((state) => state.temperaments);
  const history = useHistory();

  const [form, setForm] = useState({
    name: "",
    min_height: "",
    max_height: "",
    min_weight: "",
    max_weight: "",
    life_span: "",
    image: "",
    temperaments: [],
  });

  useEffect(() => {
    dispatch(getTemperaments());
  }, [dispatch]);

  const areAllRequiredFieldsFilled =
    form.name !== "" &&
    form.min_height !== "" &&
    form.max_height !== "" &&
    form.min_weight !== "" &&
    form.max_weight !== "" &&
    form.life_span !== "" &&
    form.image !== "";

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await dispatch(
        postDog({
          name: form.name,
          height: {
            metric: `${form.min_height} - ${form.max_height} cm`,
            imperial: `${form.min_height} - ${form.max_height} inches`,
          },
          weight: {
            metric: `${form.min_weight} - ${form.max_weight} kg`,
            imperial: `${form.min_weight} - ${form.max_weight} pounds`,
          },
          life_span: form.life_span,
          image: form.image,
          temperaments: form.temperaments,
        })
      );
      alert("The new dog was added successfully");
      setForm({
        name: "",
        min_height: "",
        max_height: "",
        min_weight: "",
        max_weight: "",
        life_span: "",
        image: "",
        temperaments: [],
      });
    } catch (error) {
      alert("Error adding the new dog: " + error.message);
    }
  };


  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prevForm) => ({
      ...prevForm,
      [name]: value,
    }));
  };

  const handleSelect = (e) => {
    const selectedTemperament = e.target.value;
    if (!form.temperaments.includes(selectedTemperament)) {
      setForm((prevForm) => ({
        ...prevForm,
        temperaments: [...prevForm.temperaments, selectedTemperament],
      }));
    }
  };

  const handleDelete = (temperamentToDelete) => {
    setForm((prevForm) => ({
      ...prevForm,
      temperaments: prevForm.temperaments.filter(
        (temp) => temp !== temperamentToDelete
      ),
    }));
  };

  const handleCancel = () => {
    history.push("/home");
  };

  return (
    <div className={styles["dog-form"]}>
      <Link to="/home">
        <button className={styles["button-to-home"]}>Go home</button>
      </Link>
      <form onSubmit={handleSubmit} className={styles["form"]}>
          <div className="name-container">
            <input
              className="input-name"
              type="text"
              value={form.name}
              name="name"
              onChange={handleChange}
              placeholder="Name..."
            />
          </div>
          {/* Error message for name */}
          <div className="error-form">{/* Display error message here */}</div>
    
          <div className="height-container">
            <div className="min-height">
              <input
                type="text"
                value={form.min_height}
                name="min_height"
                placeholder="Min height..."
                onChange={handleChange}
              />
            </div>
            <div className="max-height">
              <input
                type="text"
                value={form.max_height}
                name="max_height"
                placeholder="Max height..."
                onChange={handleChange}
              />
            </div>
          </div>
          {/* Error message for height */}
          <div className="error-form">{/* Display error message here */}</div>
    
          <div className="weight-container">
            <div className="min-weight">
              <input
                type="text"
                value={form.min_weight}
                name="min_weight"
                placeholder="Min weight..."
                onChange={handleChange}
              />
            </div>
            <div className="max-weight">
              <input
                type="text"
                value={form.max_weight}
                name="max_weight"
                placeholder="Max weight..."
                onChange={handleChange}
              />
            </div>
          </div>
          {/* Error message for weight */}
          <div className="error-form">{/* Display error message here */}</div>
    
          <div className="life-span-container">
            <input
              type="text"
              value={form.life_span}
              name="life_span"
              placeholder="Life span..."
              onChange={handleChange}
            />
          </div>
          {/* Error message for life span */}
          <div className="error-form">{/* Display error message here */}</div>
    
          <div className="image-container">
            <input
              type="text"
              autoComplete="off"
              value={form.image}
              name="image"
              placeholder="Image URL..."
              onChange={handleChange}
            />
          </div>
    
          <div className="temperaments-container">
            <h3>Select Temperaments</h3>
            <select className="temperaments-select" onChange={handleSelect}>
              <option disabled selected>
                Temperaments
              </option>
              {temperaments.map((d) => (
                <option value={d.name} key={d.name + Math.random()}>
                  {d.name}
                </option>
              ))}
            </select>
            <div className="selected-temperaments">
              {form.temperaments.map((el) => (
                <div className="selected-temperament" key={el} onClick={() => handleDelete(el)}>
                  <p>{el}</p>
                </div>
              ))}
            </div>
          </div>
    
          <div className={styles["container-button-add-dog"]}>
          <button
            className={styles["button-add-dog"]}
            disabled={!areAllRequiredFieldsFilled}
            type="submit"
          >
            Create Dog
          </button>
          <button className={styles["button-cancel"]} onClick={handleCancel}>
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};

export default Form;
  


///////////////////////////////////////////////////////////////////////////////////////
import React, { useState } from "react";
import axios from "axios";

const PostDog = () => {
  const [formData, setFormData] = useState({
    name: "",
    height: {
      imperial: "",
      metric: "",
    },
    weight: {
      imperial: "",
      metric: "",
    },
    life_span: "",
    image: "",
    temperaments: [],
  });

  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    try {
      const response = await axios.post("http://localhost:3001/dog", formData);
      console.log("Response:", response.data);
      // Aquí podrías realizar alguna acción después de hacer el POST
    } catch (error) {
      console.error("Error:", error);
    }
  };

  return (
    <div>
      <h2>Add a New Dog</h2>
      <form onSubmit={handleSubmit}>
        <label>Name:</label>
        <input type="text" name="name" value={formData.name} onChange={handleChange} />
        {/* Agrega los campos restantes aquí */}
        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

//export default PostDog;